/**
 * @packageDocumentation
 * @module api.functional.api.v1.rewards.event
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Primitive } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Pattern } from "typia/lib/tags/Pattern";

import type { RewardResponseDto } from "../../../../../../libs/shared/src/dtos/reward.dto";

/**
 * 이벤트별 보상 조회
 *
 * @tag rewards
 * @security bearer
 * @summary 이벤트 ID로 보상 목록을 조회합니다
 *
 * @controller RewardsController.getRewardsByEvent
 * @path GET /api/v1/rewards/event/:eventId
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getRewardsByEvent(
  connection: IConnection,
  _eventId: string & Pattern<"^[a-fA-F0-9]{24}$">,
): Promise<getRewardsByEvent.Output> {
  return PlainFetcher.fetch(connection, {
    ...getRewardsByEvent.METADATA,
    template: getRewardsByEvent.METADATA.path,
    path: getRewardsByEvent.path(_eventId),
  });
}
export namespace getRewardsByEvent {
  export type Output = Primitive<Array<RewardResponseDto>>;

  export const METADATA = {
    method: "GET",
    path: "/api/v1/rewards/event/:eventId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (_eventId: string & Pattern<"^[a-fA-F0-9]{24}$">) =>
    `/api/v1/rewards/event/${encodeURIComponent(_eventId?.toString() ?? "null")}`;
}
