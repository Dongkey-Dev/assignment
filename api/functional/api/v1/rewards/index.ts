/**
 * @packageDocumentation
 * @module api.functional.api.v1.rewards
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Resolved, Primitive } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Pattern } from "typia/lib/tags/Pattern";

import type {
  CreateRewardDto,
  RewardResponseDto,
} from "../../../../../libs/shared/src/dtos/reward.dto";

export * as histories from "./histories";
export * as event from "./event";
export * as request from "./request";

/**
 * 보상 등록
 *
 * type: 'POINT' | 'ITEM' | 'COUPON'
 *
 * value.amount: 보상 금액
 *
 * value.metadata: 보상 추가 정보
 *
 * period.start: 보상 시작 시간
 *
 * period.end: 보상 종료 시간
 *
 * status: 'active' | 'inactive'
 *
 * @tag rewards
 * @security bearer
 * @summary 새로운 보상을 등록합니다
 *
 * @controller RewardsController.createReward
 * @path POST /api/v1/rewards
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function createReward(
  connection: IConnection,
  _createRewardDto: createReward.Input,
): Promise<createReward.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...createReward.METADATA,
      template: createReward.METADATA.path,
      path: createReward.path(),
    },
    _createRewardDto,
  );
}
export namespace createReward {
  export type Input = Resolved<CreateRewardDto>;
  export type Output = Primitive<RewardResponseDto>;

  export const METADATA = {
    method: "POST",
    path: "/api/v1/rewards",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/api/v1/rewards";
}

/**
 * 보상 조회
 *
 * @tag rewards
 * @security bearer
 * @summary ID로 보상을 조회합니다
 *
 * @controller RewardsController.getReward
 * @path GET /api/v1/rewards/:id
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getReward(
  connection: IConnection,
  _id: string & Pattern<"^[a-fA-F0-9]{24}$">,
): Promise<getReward.Output> {
  return PlainFetcher.fetch(connection, {
    ...getReward.METADATA,
    template: getReward.METADATA.path,
    path: getReward.path(_id),
  });
}
export namespace getReward {
  export type Output = Primitive<RewardResponseDto>;

  export const METADATA = {
    method: "GET",
    path: "/api/v1/rewards/:id",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (_id: string & Pattern<"^[a-fA-F0-9]{24}$">) =>
    `/api/v1/rewards/${encodeURIComponent(_id?.toString() ?? "null")}`;
}
