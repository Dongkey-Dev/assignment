/**
 * @packageDocumentation
 * @module api.functional.api.v1.rewards.request
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Resolved, Primitive } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type {
  RequestRewardDto,
  RewardHistoryResponseDto,
} from "../../../../../../libs/shared/src/dtos/reward.dto";

/**
 * 보상 요청
 *
 * @tag rewards
 * @security bearer
 * @summary 조건을 충족한 이벤트의 보상을 요청합니다
 *
 * @controller RewardsController.requestReward
 * @path POST /api/v1/rewards/request
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function requestReward(
  connection: IConnection,
  _requestRewardDto: requestReward.Input,
): Promise<requestReward.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...requestReward.METADATA,
      template: requestReward.METADATA.path,
      path: requestReward.path(),
    },
    _requestRewardDto,
  );
}
export namespace requestReward {
  export type Input = Resolved<RequestRewardDto>;
  export type Output = Primitive<RewardHistoryResponseDto>;

  export const METADATA = {
    method: "POST",
    path: "/api/v1/rewards/request",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/api/v1/rewards/request";
}
