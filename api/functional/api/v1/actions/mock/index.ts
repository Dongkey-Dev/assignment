/**
 * @packageDocumentation
 * @module api.functional.api.v1.actions.mock
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Resolved, Primitive } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { ResponseMockAction } from "../../../../../../apps/gateway/src/actions/actions.controller";
import type { MockActionDto } from "../../../../../../libs/shared/src/dtos/action.dto";

/**
 * 유저 행동을 모킹합니다.
 *
 * 이벤트 조건을 달성하기 위한 행동을 생성합니다.
 *
 * action: 'LOGIN' | 'PURCHASE' | 'INVITE_FRIEND' | 'ACHIEVEMENT'
 *
 * type: 'USER' | 'QUEST' | 'EVENT' | 'PRODUCT'
 *
 * @tag actions
 * @summary 테스트를 위한 사용자 행동을 모킹합니다
 *
 * @controller ActionsController.mockAction
 * @path POST /api/v1/actions/mock
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function mockAction(
  connection: IConnection,
  mockActionDto: mockAction.Input,
): Promise<mockAction.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...mockAction.METADATA,
      template: mockAction.METADATA.path,
      path: mockAction.path(),
    },
    mockActionDto,
  );
}
export namespace mockAction {
  export type Input = Resolved<MockActionDto>;
  export type Output = Primitive<ResponseMockAction>;

  export const METADATA = {
    method: "POST",
    path: "/api/v1/actions/mock",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/api/v1/actions/mock";
}
